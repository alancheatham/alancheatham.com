#=============================
# File Structure
#
# - Upstream servers
# - Server definitions
#============================

#############################
#      Upstream Servers     #
#############################

# Upstream servers can be used to redirect traffic in loads
#   of different ways. Load balancing can be done here by
#   listing multiple servers which can be used and defining
#   a method of choosing one. For our cases, we can use
#   whichever server has the fewest connections (least_conn).

# Define an upstream server for our node app
upstream app_server {
    # Load balancing is done based on connection amount
    least_conn;
    
    # List all the servers which can be chosen
    # Here `app` is interchangable with the node server's
    #   ip address. Docker adds `app` to the hosts file so
    #   we can just type the service name instead (handy)!
    server app:8080;
}

#############################
#    Server Definitions     #
#############################

# Our main server definition
server {
    # Listen on port 80
    listen 80;

    # The domain of the server
    server_name alancheatham.com;

    # On any request, proxy to our node app
    location / {
        # Proxy to our upstream server which will pass
        #   the request on to one of our node apps
        proxy_pass http://app_server;

        # Some proxy configuration to make sure the
        #   request has all the information that it needs
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 900;
    }
}
